package com.sbnz.rules;

import com.sbnz.music.domain.Song;
import com.sbnz.music.domain.User;
import com.sbnz.music.domain.UserType;
import com.sbnz.music.domain.AgeGroup;
import com.sbnz.music.domain.PlayList;
import com.sbnz.music.domain.PlayListType;

rule "Create - Teens"

    when
        $u : User(age < 20)
        
    then
        $u.setAgeGroup(AgeGroup.TEEN);
        update($u);
        System.out.println("TEEN");
        
end

rule "Create - YOUNG ADULTS"

    when
        $u : User(19 < age, age < 40)
        
    then
        $u.setAgeGroup(AgeGroup.YOUNG_ADULT);
        update($u);
        System.out.println("YOUNG_ADULT");
        
end

rule "Create - ADULTS"

    when
        $u : User(39 < age, age < 65)
        
    then
        $u.setAgeGroup(AgeGroup.ADULT);
        update($u);
        System.out.println("ADULT");
        
end

rule "Create - Elder"

    when
        $u : User(64 < age)
        
    then
        $u.setAgeGroup(AgeGroup.ELDER);
        update($u);
        System.out.println("ELDER");
        
end

rule "Song - no age"

	when 
	    $s : Song(age == null)
	    
	then
		 $s.setAge(0.1);
         update($s);
	     System.out.println($s);
	    
end

rule "Playlist ALFA - Count len"
	when
		 $pl : PlayList($songs : songs, type == PlayListType.ALFA)
		 accumulate( Song( $l: len ) from $songs; $l: sum( $l ))
	then
		$pl.setLen($l);
		update($pl);
	 	System.out.println($l);
end

rule "Playlist BETA - Count len"
	when
		 $pl : PlayList($songs : songs, type == PlayListType.BETA)
		 accumulate( Song( $l: len ) from $songs; $l: sum( $l ))
	then
		$pl.setLen($l);
		update($pl);
	 	System.out.println($l);
end

rule "Playlist GAMA - Count len"
	when
		 $pl : PlayList($songs : songs, type == PlayListType.GAMA)
		 accumulate( Song( $l: len ) from $songs; $l: sum( $l ))
	then
		$pl.setLen($l);
		update($pl);
	 	System.out.println($l);
end
